// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"

	validate "github.com/kyma-project/warden/internal/validate"
)

// ValidatorSvcFactory is an autogenerated mock type for the ValidatorSvcFactory type
type ValidatorSvcFactory struct {
	mock.Mock
}

// NewValidatorSvc provides a mock function with given fields: notaryURL, notaryAllowedRegistries, notaryTimeout
func (_m *ValidatorSvcFactory) NewValidatorSvc(notaryURL string, notaryAllowedRegistries string, notaryTimeout time.Duration) validate.PodValidator {
	ret := _m.Called(notaryURL, notaryAllowedRegistries, notaryTimeout)

	if len(ret) == 0 {
		panic("no return value specified for NewValidatorSvc")
	}

	var r0 validate.PodValidator
	if rf, ok := ret.Get(0).(func(string, string, time.Duration) validate.PodValidator); ok {
		r0 = rf(notaryURL, notaryAllowedRegistries, notaryTimeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(validate.PodValidator)
		}
	}

	return r0
}

// NewValidatorSvcFactory creates a new instance of ValidatorSvcFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewValidatorSvcFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *ValidatorSvcFactory {
	mock := &ValidatorSvcFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
