// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	validate "github.com/kyma-project/warden/internal/validate"
	mock "github.com/stretchr/testify/mock"
)

// RepoFactory is an autogenerated mock type for the RepoFactory type
type RepoFactory struct {
	mock.Mock
}

// NewRepoClient provides a mock function with given fields: _a0, _a1
func (_m *RepoFactory) NewRepoClient(_a0 string, _a1 validate.NotaryConfig) (validate.NotaryRepoClient, error) {
	ret := _m.Called(_a0, _a1)

	var r0 validate.NotaryRepoClient
	if rf, ok := ret.Get(0).(func(string, validate.NotaryConfig) validate.NotaryRepoClient); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(validate.NotaryRepoClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, validate.NotaryConfig) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepoFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepoFactory creates a new instance of RepoFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepoFactory(t mockConstructorTestingTNewRepoFactory) *RepoFactory {
	mock := &RepoFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
